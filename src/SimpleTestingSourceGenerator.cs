using Microsoft.CodeAnalysis;
using System;
using Uno.SourceGeneration;
using System.Linq;
using System.Text;

namespace SimpleTesting
{
    public class SimpleTestingSourceGenerator : SourceGenerator
    {
        public override void Execute(SourceGeneratorContext context)
        {
            var project = context.GetProjectInstance();

            var testClasses = context.Compilation.SourceModule.GlobalNamespace.GetNamedTypes().Where(
                t => t.AllInterfaces.Any(i => i.Name == "IContainSimpleTests"));

            foreach (var item in testClasses)
            {
                var members = item.GetMembers()
                                  .OfType<IMethodSymbol>()
                                  .Where(m => !m.IsAbstract
                                           && !m.ReturnsVoid
                                           && !m.Parameters.Any()
                                           && m.MethodKind != MethodKind.PropertyGet
                                           && (m.DeclaredAccessibility == Accessibility.Public
                                               || m.DeclaredAccessibility == Accessibility.Internal));

                var memberText = new StringBuilder();

                foreach (var member in members)
                {
                    var returnType = member.ReturnType;

                    if (returnType.MetadataName.Equals("Boolean"))
                    {
                        memberText.Append(GetTest(item.MetadataName, member.Name, member.IsStatic));
                    }
                    else if (returnType.MetadataName.Equals("Task`1") && returnType is INamedTypeSymbol nts)
                    {
                        if (nts.Arity.Equals(1) && nts.TypeArguments.First().MetadataName.Equals("Boolean"))
                        {
                            memberText.Append(GetAsyncTest(item.MetadataName, member.Name, member.IsStatic));
                        }
                    }
                    else
                    {
                        // output nothing as not an inferred test
                    }
                }

                var memberOutput = memberText.ToString();

                if (!string.IsNullOrWhiteSpace(memberOutput))
                {
                    var classOpening = GetClassOpening(item.ContainingNamespace, item.MetadataName);
                    context.AddCompilationUnit(
                        $"{item.ContainingNamespace}.{item.MetadataName}",
                        $"{classOpening}{memberOutput}{GetClassClosing()}");
                }
            }
        }

        private string GetClassOpening(INamespaceSymbol classNs, string className)
        {
            return $"//--------------------------------------------------------------------------" + Environment.NewLine +
                   $"// <auto-generated>" + Environment.NewLine +
                   $"//  This code was autogenerated by SimpleTesting v1.0.0" + Environment.NewLine +
                   $"// </auto-generated>" + Environment.NewLine +
                   $"//--------------------------------------------------------------------------" + Environment.NewLine +
                   $"using original = {classNs};" + Environment.NewLine +
                   $"using System.Threading.Tasks;" + Environment.NewLine +
                   $"using Microsoft.VisualStudio.TestTools.UnitTesting;" + Environment.NewLine +
                   $"" + Environment.NewLine +
                   $"namespace TestWrapper.{classNs}" + Environment.NewLine +
                   $"{{" + Environment.NewLine +
                   $"    [TestClass]" + Environment.NewLine +
                   $"    public class {className}" + Environment.NewLine +
                   $"    {{" + Environment.NewLine;
        }

        private string GetClassClosing()
        {
            return $"    }}" + Environment.NewLine +
                   $"}}" + Environment.NewLine;
        }

        private string GetTest(string className, string methodName, bool methodIsStatic)
        {
            var result = new StringBuilder();

            result.AppendLine("        [TestMethod]");
            result.AppendLine($"        public void {methodName}()");
            result.AppendLine("        {");

            if (methodIsStatic)
            {
                result.AppendLine($"            Assert.IsTrue(original.{className}.{methodName}());");
            }
            else
            {
                result.AppendLine($"            var sut = new original.{className}();");
                result.AppendLine($"            Assert.IsTrue(sut.{methodName}());");
            }

            result.AppendLine("        }");
            result.AppendLine();

            return result.ToString();
        }

        private string GetAsyncTest(string className, string methodName, bool methodIsStatic)
        {
            var result = new StringBuilder();

            result.AppendLine("        [TestMethod]");
            result.AppendLine($"        public async Task {methodName}()");
            result.AppendLine("        {");

            if (methodIsStatic)
            {
                result.AppendLine($"            Assert.IsTrue(await original.{className}.{methodName}());");
            }
            else
            {
                result.AppendLine($"            var sut = new original.{className}();");
                result.AppendLine($"            Assert.IsTrue(await sut.{methodName}());");
            }

            result.AppendLine("        }");
            result.AppendLine();

            return result.ToString();
        }
    }
}
